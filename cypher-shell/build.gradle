version = buildVersion

task generateBuildProperties {
  def outputDir = file("${buildDir}/resources/main")
  doFirst {
    outputDir.exists() || outputDir.mkdirs()
    def propFile = new File(outputDir, "build.properties")
    def props = new Properties()
    props.setProperty("version", buildVersion)
    props.setProperty("driverVersion", neo4jJavaDriverVersion)
    props.store(propFile.newWriter(), null)
  }
}

processResources.finalizedBy generateBuildProperties

jar {
  manifest {
    attributes 'Main-Class': 'org.neo4j.shell.Main'
  }
}

shadowJar {
  // Insure no version number is included in jar name
  version = null
}

distributions {
  main {
    baseName = 'cypher-shell'
    contents {
      from {'src/dist'}
      from shadowJar
    }
  }
}

dependencies {
    compile "net.sourceforge.argparse4j:argparse4j:$argparse4jVersion"
    compile("org.neo4j:neo4j-cypher-expression-evaluator:$evaluatorVersion") {
        exclude(group: 'org.apache.lucene')
        exclude(group: 'org.neo4j', module: 'neo4j-index')
        exclude(group: 'org.neo4j', module: 'neo4j-lucene-upgrade')
        exclude(group: 'org.neo4j', module: 'neo4j-ssl')
        exclude(group: 'org.neo4j', module: 'neo4j-graph-algo')
        exclude(group: 'org.neo4j', module: 'neo4j-io')
        exclude(group: 'org.neo4j', module: 'neo4j-csv')
        exclude(group: 'org.neo4j', module: 'neo4j-configuration')
        exclude(group: 'org.neo4j', module: 'neo4j-collections')
        exclude(group: 'org.neo4j', module: 'neo4j-diagnostics')
        exclude(group: 'org.neo4j', module: 'neo4j-resource')
        exclude(group: 'org.neo4j', module: 'neo4j-annotation-processors')
        exclude(group: 'org.neo4j', module: 'neo4j-spatial-index')
        exclude(group: 'org.neo4j', module: 'neo4j-native')
        exclude(group: 'org.neo4j', module: 'neo4j-logging')
        exclude(group: 'org.neo4j', module: 'neo4j-procedure-api')
        exclude(group: 'org.neo4j', module: 'neo4j-kernel-api')
        exclude(group: 'org.eclipse.collections')

    }
    compile "org.neo4j.driver:neo4j-java-driver:$neo4jJavaDriverVersion"
    compileOnly "com.google.code.findbugs:annotations:$findbugsVersion"
    compile "org.fusesource.jansi:jansi:$jansiVersion"
    compile("jline:jline:$jlineVersion") {
        exclude(group: 'junit', module: 'junit')
    }
    compile group: 'commons-io', name: 'commons-io', version: "$commonsIoVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "com.github.stefanbirkner:system-rules:$systemRulesVersion"
    testCompile "org.hamcrest:java-hamcrest:$hamcrestVersion"
    testCompileOnly "com.google.code.findbugs:annotations:$findbugsVersion"
}
